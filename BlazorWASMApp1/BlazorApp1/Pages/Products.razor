@page "/product"
@using BlazorApp1.Models;
@inject ILogger<Products> logger;
@inject IProductService productService;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JSRuntime;


<PageTitle>Products</PageTitle>

<TitleComponentCustom TitleNew="Products"></TitleComponentCustom>

<button class="btn btn-dark" @onclick="@(()=> NavigationManager.NavigateTo("/addproduct"))">Add Product</button>

@if(products?.Count > 0)
{
    <div class="products-container">
        @foreach (var product in products)
        {
            <div class="card">
                <img class="card-img-top" src="@product.Images[0]" alt="Product" loading="lazy" width="270" height="210">
                <div class="card-body">
                    <h4><b>@product.Title</b></h4>
                    <p>@product.Price.ToString()</p>
                    <button title="Delete" class="btn btn-danger btn-delete" @onclick="@(() => DeleteProduct(product))"><span class="oi oi-trash"></span></button>
                </div>
            </div>
        }
    </div>

}
else
{
    <p class="text-danger">No products to show</p>
}

@code
{
    private List<Product>? products;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Hallo aus OnInitializedAsync in products");
        products = await GetProducts();
        //await GetProducts();
    }

    //private async Task GetProducts()
    private async Task<List<Product>> GetProducts()
    {
        return await productService.Get();
        //products = await productService.Get();
    }

    private async Task DeleteProduct(Product product)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Really want to remove {product.Title}?"))
            return;

        await productService.Delete(product.Id);

        //toastService.ShowSuccess("Product Deleted");

        await GetProducts();
    }

}